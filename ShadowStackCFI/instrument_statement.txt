插桩说明

长函数的ShadowStack
    在函数入口进行如下插桩(即push rbp之前)：
        movabsq	$3458764513820540927, %r11 # imm = 0x2FFFFFFFFFFFFFFF
        addq	$8, (%r11)
        movq	(%r11), %r10
        addq	%r10, %r11
        movq	(%rsp), %r10
        movq	%r10, (%r11)
        pushq	%rbp
        movq	%rsp, %rbp
	
    在函数返回前进行如下插桩(即ret之前)：
        movabsq	$3458764513820540927, %r11 # imm = 0x2FFFFFFFFFFFFFFF
        movq	(%r11), %r10
        addq	%r11, %r10
        subq	$8, (%r11)
        movq	(%r10), %r11
        cmpq	%r11, (%rsp)
        jne	exit_label

    在函数末尾进行如下插桩(即ret之后)，此处插桩目的是进行exit系统调用：
    exit_label:
	    movl	$-1, %edi
	    callq   exit

短函数的shadowstack：
    在函数入口进行如下插桩(即push rbp之前)：
        movq	(%rsp), %reg → 某个未被函数使用的reg

    在函数返回前进行如下插桩(即ret之前)：
        cmpq	%rcx, (%rsp)
        jne	exit_label

    在函数末尾进行如下插桩(即ret之后)，此处插桩目的是进行exit系统调用：
    exit_label:
        movl	$-1, %edi
	    callq   exit

对indirect call的检查
    在callq *%reg之前：
        movq	%reg, %rdi
        callq	CFICheck
    在callq *(%reg)之前：
        movq	(%reg), %rdi
        callq	CFICheck

对mov的检查
    在mov xxx, [reg+imm]之前：
        pushq   %rbx
        pushq   %rax
        pushfq
        leaq    [reg+imm], %rax
        movq    $0x3FFFFFFFFFFFFFFF, %rbx
        cmpq    %rbx, %rax
        ja      exit_label
        movq    $0x4FFFFFFFFFFFFFFF, %rbx
        cmpq    %rbx, %rax
        jb      exit_label
        popfq
        popq    %rax
        popq    %rbx
    在函数末尾进行如下插桩(即ret之后)，此处插桩目的是进行exit系统调用：
    exit_label:
        popfq
        popq    %rax
        popq    %rbx
        movl    $-1, %edi
        callq   exit

对rsp的检查
    在修改rsp的指令之后：
        pushq   %rax
        movq    $0x5FFFFFFFFFFFFFFF, %rax
        cmpq    %rax, %rsp
        ja      exit_label
        movq    $0x6FFFFFFFFFFFFFFF, %rax
        cmpq    %rax, %rsp
        jb      exit_label
        popq    %rax
    或在指令movq %rbp, %rsp之前：
        pushq   %rax
        movq    $0x5FFFFFFFFFFFFFFF, %rax
        cmpq    %rax, %rbp
        ja      exit_label
        movq    $0x6FFFFFFFFFFFFFFF, %rax
        cmpq    %rax, %rbp
        jb      exit_label
        popq    %rax
    在函数末尾进行如下插桩(即ret之后)，此处插桩目的是进行exit系统调用：
    exit_label:
        popq    %rax
        movl    $-1, %edi
        callq   exit

TSX插桩
    函数入口处：
        lahf
        movq	%rax, %r14
        callq	transactionEndBegin
        movq	%r14, %rax
        sahf
         注：enclave_main函数会将transactionEndBegin改为transactionBegin
    函数出口处(即ret之前)：
        movq	%rax, %r15
        lahf
        movq	%rax, %r14
        callq	transactionEndBegin
        movq	%r14, %rax
        sahf
        movq	%r15, %rax
    分支指令前(包括函数调用和跳转)：
        movq	%rax, %r15
        lahf
        movq	%rax, %r14
        callq	transactionEndBegin
        movq	%r14, %rax
        sahf
        movq	%r15, %rax
         注：wrapper函数无此插桩，因mov检查、rsp检查、ShadowStack和CFICheck造成的分支无此插桩
    分支指令后(包括函数调用和跳转)：
        movq	%rax, %r15
        lahf
        movq	%rax, %r14
        callq	transactionEndBegin
        movq	%r14, %rax
        sahf
        movq	%r15, %rax
         注：wrapper函数无此插桩，因mov检查、rsp检查、SadowStack和CFICheck造成的分支无此插桩
    BasicBlock入口处(即BasicBlock的第一个指令)：
        movq	%rax, %r15
        lahf
        movq	%rax, %r14
        callq	transactionEndBegin
        movq	%r14, %rax
        sahf
        movq	%r15, %rax
    BasicBlock出口处(即BasicBlock的最后一个指令)：
        movq	%rax, %r15
        lahf
        movq	%rax, %r14
        callq	transactionEndBegin
        movq	%r14, %rax
        sahf
        movq	%r15, %rax
         注：若BasicBlock最后的指令是ret，则无此插桩
    关于wrapper函数
        名称：若原函数名称为funA，则其对应的wrapper函数名称为wrapper_by_compiler_funA
        插桩：wrapper函数仅有函数入口和函数出口的TSX插桩
        wrapper函数入口处插桩：
            xend
        wrapper函数出口处插桩：
            movq	%rax, %r15
            lahf
            movq	%rax, %r14
            callq	transactionBegin
            movq	%r14, %rax
            sahf
            movq	%r15, %rax
    关于插桩冲突
        TSX与ShadowStack的冲突
            函数入口处，ShadowStack插桩将改为：
                xend
                movq	%r15, %rax
                movabsq	$3458764513820540927, %r11 # imm = 0x2FFFFFFFFFFFFFFF
                addq	$8, (%r11)
                movq	(%r11), %r10
                addq	%r10, %r11
                movq	(%rsp), %r10
                movq	%r10, (%r11)
                movq	%rax, %r15
                lahf
                movq	%rax, %r14
                callq	transactionBegin
                movq	%r14, %rax
                sahf
                movq	%r15, %rax
            函数出口处，ShadowStack插桩将改为：
                xend
                movabsq	$3458764513820540927, %r11 # imm = 0x2FFFFFFFFFFFFFFF
                movq	(%r11), %r10
                addq	%r11, %r10
                subq	$8, (%r11)
                movq	(%r10), %r11
                cmpq	%r11, (%rsp)
                jne	.LBB0_4
                movq	%rax, %r15
                lahf
                movq	%rax, %r14
                callq	transactionBegin
                movq	%r14, %rax
                sahf
                movq	%r15, %rax
        TSX与CFICheck的冲突
            在CFICheck.c中跳出TSX
        其它
            对mov检查、rsp检查和ShadowStack插桩造成的分支指令不作TSX插桩
            CFICheck函数和transactionBegin、transactionEndBegin函数本身不作TSX插桩，对它们的调用也不作TSX插桩
            目前CFICheck和所有wrapper函数都有完整的mov检查、rsp检查和ShadowStack插桩，transactionBegin和transactionEndBegin无插桩